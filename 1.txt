#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<ctype.h>

struct MOTtable 
{
	char Mnemonic[6];
	int Class;
	char Opcode[3];
};

struct symboltable 
{
	char Symbol[8];
	int Address;
	int Size;
} SymbolTable[20];

struct Littable 
{
	char literal[7];
	int address;
} LIT[10];

struct pooltable 
{
	int literal_no;
} PoolTable[10];


struct intermediatecode 
{
	int LC;
	int Code1, Type1;
	int Code2, Type2;
	int Code3, Type3;
} IntermediateCode[30];


//Class = 1 i.e. IS
//Class = 2 i.e. Declarative
//Class = 3 i.e. Assembler Directive
//Class = 4 i.e. Registers
//Class = 5 i.e. Conditional Statements
static struct MOTtable MOT[28] = { { "STOP", 1, "00" }, { "ADD", 1, "01" },
		{ "SUB", 1, "02" }, { "MULT", 1, "03" },
		{ "MOVER", 1, "04" }, { "MOVEM", 1, "05" },
		{ "COMP", 1, "06" }, { "BC", 1, "07" },
		{ "DIV", 1, "08" }, { "READ", 1, "09" },
		{ "PRINT", 1, "10" }, { "START", 3, "01" },
		{ "END", 3, "02" }, { "ORIGIN", 3, "03" },
		{ "EQU", 3, "04" }, { "LTORG", 3, "05" },
		{ "DC", 2, "01" }, { "DS", 2, "02" },
		{ "AREG", 4, "01" }, { "BREG", 4, "02" },
		{ "CREG", 4, "03" }, { "LT", 5, "01" },
		{ "LE", 5, "02" }, { "EQ", 5, "03" },
		{ "GT", 5, "04" }, { "GE", 5, "05" }, { "ANY", 5, "06" } };

int nMOT = 28; 				//Number of entries in MOT
int LC = 0;    				//Location counter 
int iST = 0;   				//Index of next entry in Symbol Table
int iIC = 0;   				//Index of next entry in intermediate code table
int tokencount;  			//total number of words in a statement
int littab_ptr = 0;
int pooltab_ptr = 0;
char s1[8], s2[8], s3[8], label[8];

void imperative();  		//Handle an executable statement

void declaration(); 		//Handle a declaration statement
	void DC();   				//Handle declaration statement DC
	void DS();   				//Handle declaration statement DS
	
void directive();  			//Handle an assembler directive
	void START();  				//Handle START directive
	void LTORG();
	void ORIGIN();
	void EQU();

void print_lit_pool();
void print_symbol_table(); 	//Display symbol table
void print_opcode();  		//Display opcode table
void print_intermediate();  //Display intermediate code

int searchMOT(char symbol[]) 
{
	int i;
	for (i = 0; i < nMOT; i++)
	{
		if (strcmp(MOT[i].Mnemonic, symbol) == 0) 
		{
			return (i);
		}
	}
	return (-1);
}

int searchST(char symbol[]) 
{
	int i;
	for (i = 0; i < iST; i++)
	{
		if (strcmp(SymbolTable[i].Symbol, symbol) == 0) 
		{
			return (i);
		}
	}
	return (-1);
}


int insertST(char symbol[], int address, int size) 
{
	strcpy(SymbolTable[iST].Symbol, symbol);
	SymbolTable[iST].Address = address;
	SymbolTable[iST].Size = size;
	iST++;
	return (iST - 1);
}

int isLiteral(char symbol[])
{
	if (strchr(symbol, '=') == NULL)
		return 0;
	return 1;
}
void main() 
{
	char fileName[40], nextline[80];
	int len, i, j, temp, errortype;
	FILE *ptr1;
	
	printf("\nEnter source file name:");
	scanf("%s", fileName);
	ptr1 = fopen(fileName, "r");
	
	PoolTable[0].literal_no = 0;
	
	while (!feof(ptr1)) 
	{
		//Read a line of assembly program and remove special characters
		i = 0;
		nextline[i] = fgetc(ptr1);
		while (nextline[i] != '\n' && nextline[i] != EOF) 
		{
			if (!isalnum(nextline[i]) && nextline[i] != '=' && nextline[i] != '\'')
				nextline[i] = ' ';
			else
				nextline[i] = toupper(nextline[i]);
			i++;
			nextline[i] = fgetc(ptr1);
		}
		nextline[i] = '\0';
		
		sscanf(nextline, "%s", s1); //read from the nextline in s1
		if (strcmp(s1, "END") == 0) //if the nextline is an END statement
		{
			LTORG();
			break;
		}
		
		//if the nextline contains a label 
		if (searchMOT(s1) == -1) 
		{
			if (searchST(s1) == -1) 
			{
				insertST(s1, LC, 0);
			} 
			else 
			{
				SymbolTable[searchST(s1)].Address = LC;
			}
			//separate opcode and operands
			tokencount = sscanf(nextline, "%s%s%s%s", label, s1, s2, s3);
			tokencount--;
		} 
		//if the nextline does not contain label
		else
		{	//separate opcode and operands
			tokencount = sscanf(nextline, "%s%s%s", s1, s2, s3);
		}
		
		//if blank line
		if (tokencount == 0)
			continue; //goto the beginning of the loop
		
		i = searchMOT(s1);
		if (i == -1) 
		{
			printf("\nWrong Opcode .... %s", s1);
			continue;
		}
		switch (MOT[i].Class) 
		{
			case 1:
				imperative();
				break;
			case 2:
				declaration();
				break;
			case 3:
				directive();
				break;
			default:
				printf("\nWrong opcode ...%s", s1);
				break;
		}
	}
	
	print_opcode();
	print_symbol_table();
	print_lit_pool();
	print_intermediate();
	printf("\n");
}

void imperative() 
{
	int index;
	
	IntermediateCode[iIC].Type1 = IntermediateCode[iIC].Type2 =IntermediateCode[iIC].Type3 = 0; //intialize
	
	index = searchMOT(s1);
		
	IntermediateCode[iIC].LC = LC;
	IntermediateCode[iIC].Code1 = index;
	IntermediateCode[iIC].Type1 = MOT[index].Class;
	LC = LC + 1;
	
	if (tokencount > 1) 
	{
		index = searchMOT(s2);
		//printf("%s\n",s2);
		if (index != -1) 
		{
			IntermediateCode[iIC].Code2 = index;
			IntermediateCode[iIC].Type2 = MOT[index].Class;
		} 
		else 
		{   	//It is a variable
			index = searchST(s2);
			if (index == -1) 
			{
				index = insertST(s2, 0, 0);
			}
			IntermediateCode[iIC].Code2 = index;
			IntermediateCode[iIC].Type2 = 7; //VALUE 7 IS FOR VARIABLES
		}
	}

	if (tokencount > 2) 
	{
		index = searchST(s3);	// -1 for symbol not defined and literal
		if (isLiteral(s3) == 0) 
		{	//so first check literal
			if (index == -1) 
			{		//symbol undefined
				index = insertST(s3, 0, 0);
			}
			IntermediateCode[iIC].Code3 = index;
			IntermediateCode[iIC].Type3 = 7; //VALUE 7 IS FOR VARIABLES
		} 
		else 
		{
			//if literal
			IntermediateCode[iIC].Code3 = littab_ptr;
			IntermediateCode[iIC].Type3 = 8;
			strcpy(LIT[littab_ptr].literal, s3);
			littab_ptr++;
		}
	}
	iIC++;
}

void declaration() {
	if (strcmp(s1, "DC") == 0) 
	{
		DC();
		return;
	}
	if (strcmp(s1, "DS") == 0)
		DS();
}

void directive() 
{
	if (strcmp(s1, "START") == 0) 
	{
		START();
		return;
	} 
	else if (strcmp(s1, "LTORG") == 0) 
	{
		LTORG();
		return;
	} 
	else if (strcmp(s1, "EQU") == 0)
	{
		EQU();
		return;
	} 
	else 
	{
		ORIGIN();
	}
}

void DC() 
{
	int index;
	IntermediateCode[iIC].Type1 = IntermediateCode[iIC].Type2 =IntermediateCode[iIC].Type3 = 0; //intialize
	
	//checking for the 'DC'
	index = searchMOT(s1);
	
	IntermediateCode[iIC].LC = LC;
	IntermediateCode[iIC].Code1 = index;
	IntermediateCode[iIC].Type1 = MOT[index].Class;
	IntermediateCode[iIC].Type2 = 6;        //6 IS TYPE FOR CONSTANTS
	IntermediateCode[iIC].Code2 = atoi(s2);
	
	//checking for the variable
	index = searchST(label);
	if (index == -1) 
	{
		index = insertST(label, 0, 0);
	}
	SymbolTable[index].Address = LC;
	SymbolTable[index].Size = 1;
	LC = LC + 1;
	iIC++;
}

void DS() 
{
	int index;
	IntermediateCode[iIC].Type1 = IntermediateCode[iIC].Type2 = IntermediateCode[iIC].Type3 = 0; //intialize

	//checking for 'DS' 
	index = searchMOT(s1);
	
	IntermediateCode[iIC].LC = LC;
	IntermediateCode[iIC].Code1 = index;
	IntermediateCode[iIC].Type1 = MOT[index].Class;
	IntermediateCode[iIC].Type2 = 6;        //6 IS TYPE FOR CONSTANTS
	IntermediateCode[iIC].Code2 = atoi(s2);
	
	//checking for the variable name
	index = searchST(label);
	if (index == -1) 
	{
		index = insertST(label, 0, 0);
	}
	SymbolTable[index].Address = LC;
	SymbolTable[index].Size = atoi(s2);
	LC = LC + atoi(s2);
	iIC++;
}

void START() 
{
	int index;
	IntermediateCode[iIC].Type1 = IntermediateCode[iIC].Type2 = IntermediateCode[iIC].Type3 = 0; //intialize
	
	index = searchMOT(s1);
	
	IntermediateCode[iIC].LC = LC;
	IntermediateCode[iIC].Code1 = index;
	IntermediateCode[iIC].Type1 = MOT[index].Class;
	IntermediateCode[iIC].Type2 = 6;        //6 IS TYPE FOR CONSTANTS
	IntermediateCode[iIC].Code2 = atoi(s2);
	LC = atoi(s2);
	iIC++;
}

void EQU() 
{
	int index = searchST(label), index1;
	if (index == -1) 
	{
		index = insertST(label, 0, 0);
	}
	
	//if direct address not mentioned
	if (isdigit(s2[0]) == 0) 
	{
		index1 = searchST(s2);
		SymbolTable[index].Address = SymbolTable[index1].Address;
	} 
	else 
	{
		SymbolTable[index].Address = atoi(s2);
	}
	SymbolTable[index].Size = 1;
}

void LTORG() 
{
	int i;
	for (i = PoolTable[pooltab_ptr].literal_no; i < littab_ptr; i++) 
	{
		LIT[i].address = LC++;
	}
	pooltab_ptr++;
	PoolTable[pooltab_ptr].literal_no = littab_ptr;
}

void ORIGIN()
{
	LC = atoi(s2);
}


void print_intermediate() 
{
	int i;
	char decode[9][3] = { " ", "IS", "DL", "AD", "RG", "CC", "C", "S", "L" };
	printf("\n*********** Intermediate Code *********\n");
	for (i = 0; i < iIC; i++) 
	{
		printf("\n%3d)   (%s,%2s)", IntermediateCode[i].LC, 
						decode[IntermediateCode[i].Type1],
						MOT[IntermediateCode[i].Code1].Opcode);
		
		if (IntermediateCode[i].Type2 != 0) 
		{
			if (IntermediateCode[i].Type2 < 6)
				printf(" (%s,%2s)", decode[IntermediateCode[i].Type2]
					,MOT[IntermediateCode[i].Code2].Opcode);
			else
				printf("  (%s,%2d)", decode[IntermediateCode[i].Type2]
							,IntermediateCode[i].Code2);
		}
		if (IntermediateCode[i].Type3 != 0)
			printf("  (%s,%2d)", decode[IntermediateCode[i].Type3],
					IntermediateCode[i].Code3);
	}
}
void print_symbol_table() {
	int i;
	printf("\n*********** symbol table *************\n");
	for (i = 0; i < iST; i++)
		printf("%10s  %3d   %3d\n", SymbolTable[i].Symbol,
				SymbolTable[i].Address, SymbolTable[i].Size);
}

void print_opcode() {
	int i;
	printf("\n*********** opcode table *************\n");
	for (i = 0; i < nMOT; i++)
		if (MOT[i].Class == 1)
			printf("%6s   %2s\n", MOT[i].Mnemonic, MOT[i].Opcode);
}

void print_lit_pool() {
	int i;
	printf("\n*********** LITTAB *******************\n");
	for (i = 0; i < littab_ptr; i++)
		printf("%s   %d\n", LIT[i].literal, LIT[i].address);
	printf("\n*********** POOLTAB ******************\n");
	for (i = 0; i < pooltab_ptr; i++)
		printf("%d\n", PoolTable[i].literal_no);
}




/*
						OUTPUT



Enter source file name:src.txt

*********** opcode table *************
  STOP   00
   ADD   01
   SUB   02
  MULT   03
 MOVER   04
 MOVEM   05
  COMP   06
    BC   07
   DIV   08
  READ   09
 PRINT   10

*********** symbol table *************
      LOOP  510     0
         A  526     1
      NEXT  523     0
         B  527    15
      BACK  510     1

*********** LITTAB *******************
='5'   518
='1'   519
='5'   520
='1'   525
='1'   542

*********** POOLTAB ******************
0
3
4

*********** Intermediate Code *********

  0)   (AD,01)  (C,510)
510)   (IS,04) (RG,01)  (S, 1)
511)   (IS,04) (RG,01)  (L, 0)
512)   (IS,05) (RG,01)  (S, 1)
513)   (IS,07) (CC,04)  (S, 2)
514)   (IS,04) (RG,03)  (S, 3)
515)   (IS,01) (RG,03)  (L, 1)
516)   (IS,05) (RG,03)  (S, 3)
517)   (IS,02) (RG,03)  (L, 2)
521)   (IS,01) (RG,03)  (S, 3)
522)   (IS,07) (CC,02)  (S, 0)
523)   (IS,02) (RG,01)  (L, 3)
524)   (IS,07) (CC,01)  (S, 4)
526)   (IS,00)
525)   (IS,03) (RG,03)  (L, 4)
526)   (DL,01)  (C, 1)
527)   (DL,02)  (C,15)
kara@kara-VirtualBox:~/Documents$ 